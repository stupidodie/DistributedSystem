// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BroadcastClient is the client API for Broadcast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastClient interface {
	SendBroadcast(ctx context.Context, opts ...grpc.CallOption) (Broadcast_SendBroadcastClient, error)
}

type broadcastClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastClient(cc grpc.ClientConnInterface) BroadcastClient {
	return &broadcastClient{cc}
}

func (c *broadcastClient) SendBroadcast(ctx context.Context, opts ...grpc.CallOption) (Broadcast_SendBroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &Broadcast_ServiceDesc.Streams[0], "/simpleGuide.Broadcast/SendBroadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &broadcastSendBroadcastClient{stream}
	return x, nil
}

type Broadcast_SendBroadcastClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type broadcastSendBroadcastClient struct {
	grpc.ClientStream
}

func (x *broadcastSendBroadcastClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *broadcastSendBroadcastClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BroadcastServer is the server API for Broadcast service.
// All implementations must embed UnimplementedBroadcastServer
// for forward compatibility
type BroadcastServer interface {
	SendBroadcast(Broadcast_SendBroadcastServer) error
	mustEmbedUnimplementedBroadcastServer()
}

// UnimplementedBroadcastServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastServer struct {
}

func (UnimplementedBroadcastServer) SendBroadcast(Broadcast_SendBroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method SendBroadcast not implemented")
}
func (UnimplementedBroadcastServer) mustEmbedUnimplementedBroadcastServer() {}

// UnsafeBroadcastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastServer will
// result in compilation errors.
type UnsafeBroadcastServer interface {
	mustEmbedUnimplementedBroadcastServer()
}

func RegisterBroadcastServer(s grpc.ServiceRegistrar, srv BroadcastServer) {
	s.RegisterService(&Broadcast_ServiceDesc, srv)
}

func _Broadcast_SendBroadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BroadcastServer).SendBroadcast(&broadcastSendBroadcastServer{stream})
}

type Broadcast_SendBroadcastServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type broadcastSendBroadcastServer struct {
	grpc.ServerStream
}

func (x *broadcastSendBroadcastServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *broadcastSendBroadcastServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Broadcast_ServiceDesc is the grpc.ServiceDesc for Broadcast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broadcast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simpleGuide.Broadcast",
	HandlerType: (*BroadcastServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBroadcast",
			Handler:       _Broadcast_SendBroadcast_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
